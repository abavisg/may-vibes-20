#!/usr/bin/env python3
"""
Standalone Email Sender Module
Email notification system for CFP Scout traditional mode
"""

import os
import smtplib
from typing import List, Dict
from datetime import datetime
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

class EmailSender:
    """Email sender for CFP notifications"""
    
    def __init__(self):
        self.smtp_server = os.getenv('SMTP_SERVER', 'smtp.gmail.com')
        self.smtp_port = int(os.getenv('SMTP_PORT', '587'))
        self.email_address = os.getenv('EMAIL_ADDRESS')
        self.email_password = os.getenv('EMAIL_PASSWORD')
        self.to_email = os.getenv('TO_EMAIL')
        
        if not all([self.email_address, self.email_password, self.to_email]):
            print("‚ö†Ô∏è Warning: Email configuration incomplete - set EMAIL_ADDRESS, EMAIL_PASSWORD, and TO_EMAIL in .env")
    
    def _test_smtp_connection(self) -> bool:
        """Test SMTP connection"""
        try:
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.email_address, self.email_password)
                return True
        except Exception as e:
            print(f"SMTP connection failed: {e}")
            return False
    
    def _format_events_html(self, events: List[Dict]) -> str:
        """Format events as HTML email content"""
        if not events:
            return "<p>No relevant CFP events found.</p>"
        
        html = """
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                .header { background-color: #4CAF50; color: white; padding: 20px; text-align: center; }
                .event { border: 1px solid #ddd; margin: 15px 0; padding: 15px; border-radius: 5px; }
                .event-title { font-size: 18px; font-weight: bold; color: #2E7D32; margin-bottom: 10px; }
                .event-meta { color: #666; font-size: 14px; margin: 5px 0; }
                .event-tags { margin: 10px 0; }
                .tag { background-color: #E8F5E8; color: #2E7D32; padding: 2px 8px; border-radius: 3px; margin-right: 5px; font-size: 12px; }
                .deadline { color: #D32F2F; font-weight: bold; }
                .relevance { background-color: #FFF3E0; padding: 5px; border-radius: 3px; margin: 5px 0; }
                .footer { margin-top: 30px; padding: 20px; background-color: #f5f5f5; text-align: center; font-size: 12px; color: #666; }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üì¢ CFP Scout Daily Report</h1>
                <p>Your personalized conference CFP recommendations</p>
            </div>
        """
        
        html += f"<p><strong>Found {len(events)} relevant CFP events for you:</strong></p>"
        
        for i, event in enumerate(events, 1):
            relevance_score = event.get('relevance_score', 0)
            relevance_color = "#4CAF50" if relevance_score >= 0.8 else "#FF9800" if relevance_score >= 0.6 else "#F44336"
            
            html += f"""
            <div class="event">
                <div class="event-title">{i}. {event.get('title', 'Unknown Event')}</div>
                <div class="event-meta">üìç <strong>Location:</strong> {event.get('location', 'Unknown')}</div>
                <div class="event-meta deadline">‚è∞ <strong>CFP Deadline:</strong> {event.get('cfp_deadline', 'Unknown')}</div>
                <div class="event-meta">üîó <strong>Link:</strong> <a href="{event.get('link', '#')}">{event.get('link', 'No link available')}</a></div>
                <div class="relevance" style="border-left: 4px solid {relevance_color};">
                    <strong>Relevance Score:</strong> {relevance_score:.2f}/1.0
                </div>
            """
            
            if event.get('tags'):
                html += '<div class="event-tags"><strong>Topics:</strong> '
                for tag in event.get('tags', []):
                    html += f'<span class="tag">{tag}</span>'
                html += '</div>'
            
            if event.get('description'):
                description = event['description'][:200] + "..." if len(event['description']) > 200 else event['description']
                html += f'<div class="event-meta"><strong>Description:</strong> {description}</div>'
            
            html += '</div>'
        
        html += f"""
            <div class="footer">
                <p>ü§ñ Generated by CFP Scout using Ollama AI ‚Ä¢ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
                <p>This email was automatically generated based on your interests in AI, machine learning, engineering leadership, and more.</p>
            </div>
        </body>
        </html>
        """
        
        return html
    
    def send_cfp_email(self, events: List[Dict]) -> bool:
        """Send CFP events via email - simplified interface for traditional mode"""
        try:
            if not all([self.email_address, self.email_password, self.to_email]):
                print("‚ö†Ô∏è Email configuration incomplete - skipping email sending")
                return False
            
            # Create message
            msg = MIMEMultipart('alternative')
            msg['Subject'] = f"üì¢ CFP Scout: {len(events)} Relevant Conference CFPs Found"
            msg['From'] = self.email_address
            msg['To'] = self.to_email
            
            # Create HTML content
            html_content = self._format_events_html(events)
            html_part = MIMEText(html_content, 'html')
            
            # Create plain text content
            text_content = f"CFP Scout Daily Report\n{'='*50}\n\n"
            text_content += f"Found {len(events)} relevant CFP events:\n\n"
            
            for i, event in enumerate(events, 1):
                text_content += f"{i}. {event.get('title', 'Unknown Event')}\n"
                text_content += f"   Location: {event.get('location', 'Unknown')}\n"
                text_content += f"   Deadline: {event.get('cfp_deadline', 'Unknown')}\n"
                text_content += f"   Link: {event.get('link', 'No link')}\n"
                text_content += f"   Relevance: {event.get('relevance_score', 0):.2f}/1.0\n\n"
            
            text_content += f"\nGenerated by CFP Scout ‚Ä¢ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            text_part = MIMEText(text_content, 'plain')
            
            # Attach parts
            msg.attach(text_part)
            msg.attach(html_part)
            
            # Send email
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.email_address, self.email_password)
                server.send_message(msg)
            
            print(f"‚úÖ Email sent successfully to {self.to_email}")
            return True
            
        except Exception as e:
            print(f"‚ùå Email sending failed: {e}")
            return False

# Global instance for easy access
_email_sender = EmailSender()

def send_cfp_email(events: List[Dict]) -> bool:
    """
    Main function interface for sending CFP emails
    This is the function that event_orchestrator.py expects
    
    Args:
        events: List of event dictionaries
        
    Returns:
        bool: True if email sent successfully, False otherwise
    """
    return _email_sender.send_cfp_email(events)

if __name__ == "__main__":
    # Test the email sender
    test_events = [
        {
            'title': 'Test Conference',
            'location': 'Online',
            'cfp_deadline': '2025-06-01',
            'link': 'https://example.com',
            'relevance_score': 0.85,
            'tags': ['AI', 'Machine Learning'],
            'description': 'A test conference for CFP Scout email testing'
        }
    ]
    
    print("Testing email sender...")
    success = send_cfp_email(test_events)
    if success:
        print("‚úÖ Email test successful!")
    else:
        print("‚ùå Email test failed - check your .env configuration") 